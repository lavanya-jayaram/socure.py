#Install required libraries
!pip install transformers gradio

# Import required packages
from transformers import AutoModelForCausalLM, AutoTokenizer
import torch
import gradio as gr

# Load the pretrained DialoGPT-medium model
tokenizer = AutoTokenizer.from_pretrained("microsoft/DialoGPT-medium")
model = AutoModelForCausalLM.from_pretrained("microsoft/DialoGPT-medium")

# Keep track of chat history
chat_history_ids = None

def chatbot_response(user_input, history=[]):
    global chat_history_ids

    # Encode the user input
    new_input_ids = tokenizer.encode(user_input + tokenizer.eos_token, return_tensors='pt')

    # Append the new user input tokens to the chat history
    bot_input_ids = torch.cat([chat_history_ids, new_input_ids], dim=-1) if chat_history_ids is not None else new_input_ids

    # Generate a response
    chat_history_ids = model.generate(bot_input_ids, max_length=1000, pad_token_id=tokenizer.eos_token_id)

    # Decode the response
    response = tokenizer.decode(chat_history_ids[:, bot_input_ids.shape[-1]:][0], skip_special_tokens=True)

    # Append to history
    history.append((user_input, response))

    return history, history

# Gradio UI
with gr.Blocks() as demo:
    chatbot = gr.Chatbot()
    msg = gr.Textbox(label="Ask your question")
    state = gr.State([])

    def respond(message, history):
        return chatbot_response(message, history)

    msg.submit(respond, [msg, state], [chatbot, state])

# Launch the chatbot
demo.launch()
